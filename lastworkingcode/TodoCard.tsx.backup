import { useState, useEffect, useRef } from 'react';
import { TodoItem } from './TodoItem';
import { CardToolbar } from './CardToolbar';
import { useCardContext } from '../context/CardContext';
import { useModal } from '../context/ModalContext';
import { validateInput, isValidTitle, isValidContent } from '../utils/security';
import {
  addTodoItem,
  deleteTodoItem,
  editTodoItem,
  toggleTodoItem,
  updateCardTitle,
  updateCardBackgroundColor,
  createEmptyCard,
} from '../utils/todoHelpers';
import { getRandomColor } from '../constants/colors';
import type { TodoCardProps, TodoCardData } from '../types';

export const TodoCard = ({
  cardId,
  onSave,
  onDelete,
  isModal = false,
  onClose,
  focusTarget,
  onCardClick,
}: TodoCardProps) => {
  const { upsertCard, deleteCard, todoCards } = useCardContext();
  const { closeEdit } = useModal();
  const [isColorPickerOpen, setIsColorPickerOpen] = useState(false);
  const [localCard, setLocalCard] = useState<TodoCardData | null>(null);
  const currentCardRef = useRef<TodoCardData | null>(null);
  const titleInputRef = useRef<HTMLInputElement>(null);
  const todoInputRefs = useRef<(HTMLInputElement | null)[]>([]);

  const cardFromContext = cardId ? todoCards.find(card => card.id === cardId) : null;
  const fallbackCard = cardFromContext || createEmptyCard(getRandomColor());
  
  const currentCard = isModal ? (localCard || fallbackCard) : fallbackCard;
  const isEditing = isModal;

  useEffect(() => {
    if (isModal && cardFromContext) {
      setLocalCard({ ...cardFromContext });
    }
  }, [isModal, cardFromContext]);

  useEffect(() => {
    currentCardRef.current = currentCard;
  }, [currentCard]);

  useEffect(() => {
    if (isModal) {
      const handleEscKey = (e: KeyboardEvent) => {
        if (e.key === 'Escape') {
          handleClose();
        }
      };
      document.addEventListener('keydown', handleEscKey);
      return () => document.removeEventListener('keydown', handleEscKey);
    }
  }, [isModal]);

  useEffect(() => {
    if (isModal && focusTarget !== undefined) {
      if (focusTarget === 'title' && titleInputRef.current) {
        titleInputRef.current.focus();
      } else if (typeof focusTarget === 'number' && todoInputRefs.current[focusTarget]) {
        todoInputRefs.current[focusTarget]?.focus();
      }
    }
  }, [isModal, focusTarget]);

  const updateCard = (updatedCard: TodoCardData) => {
    if (isModal) {
      setLocalCard(updatedCard);
    } else {
      upsertCard(updatedCard);
    }
  };

  const handleClose = () => {
    if (localCard) {
      upsertCard(localCard);
    }
    if (onClose) onClose();
    if (closeEdit) closeEdit();
  };

  const handleSave = () => {
    if (localCard) {
      upsertCard(localCard);
    }
    if (onSave) onSave(currentCard);
    if (onClose) onClose();
  };

  const handleTitleChange = (newTitle: string) => {
    const sanitizedTitle = validateInput(newTitle, 100);
    if (isValidTitle(sanitizedTitle) || sanitizedTitle === '') {
      updateCard(updateCardTitle(currentCard, sanitizedTitle));
    }
  };

  const handleColorChange = (newColor: string) => {
    updateCard(updateCardBackgroundColor(currentCard, newColor));
  };

  const handleAddTodo = () => {
    updateCard(addTodoItem(currentCard));
  };

  const handleDeleteTodo = (todoId: string) => {
    updateCard(deleteTodoItem(currentCard, todoId));
  };

  const handleEditTodo = (todoId: string, newTask: string) => {
    const sanitizedTask = validateInput(newTask, 1000, false);
    if (isValidContent(sanitizedTask) || sanitizedTask === '') {
      updateCard(editTodoItem(currentCard, todoId, sanitizedTask));
    }
  };

  const handleToggleTodo = (todoId: string) => {
    updateCard(toggleTodoItem(currentCard, todoId));
  };

  const handleDeleteCard = (cardIdToDelete: string) => {
    deleteCard(cardIdToDelete);
    if (onDelete) onDelete(cardIdToDelete);
    if (isModal && onClose) onClose();
  };

  const handleClick = (action: () => void) => (e: React.MouseEvent) => {
    e.stopPropagation();
    action();
  };

  const cardContent = (
    <div
      data-testid="todoCard"
      className={`group p-6 rounded-3xl flex flex-col relative min-h-0 ${
        isModal ? 'opacity-100' : 'opacity-75 hover:opacity-90 transition-opacity duration-200'
      } shadow-[0_25px_50px_-12px_rgba(0,0,0,0.25),inset_-12px_-12px_15px_0px_rgba(55,65,81,0.24),inset_12px_12px_16px_0px_rgba(55,65,81,0.24)] 
      cursor-pointer w-full border-6 border-[#B7B7B7] ${
        currentCard.backgroundColor || 'bg-gradient-to-br from-gray-300/80 to-gray-100/40'
      } ${isColorPickerOpen ? 'z-[10000]' : ''}`}
      onClick={!isModal && onCardClick ? handleClick(() => onCardClick('title')) : undefined}
    >
      {isEditing ? (
        <input
          ref={titleInputRef}
          type="text"
          placeholder="Enter a title..."
          value={currentCard.title}
          onChange={(e) => handleTitleChange(e.target.value)}
          className="w-full bg-transparent border-none outline-none font-semibold text-2xl tracking-widest text-gray-700 placeholder-gray-700/60 mb-2"
          data-testid="todoCard-title-input"
        />
      ) : (
        <div
          className="w-full bg-transparent border-none outline-none font-semibold text-2xl tracking-widest text-gray-700 placeholder-gray-700/60 mb-2 cursor-pointer"
          onClick={onCardClick ? handleClick(() => onCardClick('title')) : undefined}
        >
          {currentCard.title || 'Enter a title...'}
        </div>
      )}

      <div data-testid="todoItem-list" className="space-y-1 flex-1">
        {currentCard.todos.map((todo, index) => (
          <div key={todo.id} onClick={!isModal && onCardClick ? handleClick(() => onCardClick(index)) : undefined}>
            <TodoItem
              todo={todo}
              inputRef={(ref: HTMLInputElement | null) => {
                todoInputRefs.current[index] = ref;
              }}
              onDelete={isEditing ? handleDeleteTodo : () => {}}
              onEdit={isEditing ? handleEditTodo : () => {}}
              onToggle={isEditing ? handleToggleTodo : () => {}}
            />
          </div>
        ))}
      </div>

      <div className={`mt-8 text-xs tracking-wide text-gray-700 w-full text-right ${
        isModal ? '' : 'opacity-0 group-hover:opacity-100'
      }`}>
        <span>
          Edited{' '}
          {currentCard?.updatedAt
            ? new Date(currentCard.updatedAt).toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
              })
            : new Date().toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
              })}
        </span>
      </div>

      <CardToolbar
        isModal={isModal}
        isBeingEdited={false}
        initialData={currentCard}
        backgroundColor={currentCard.backgroundColor}
        hasUnsavedChanges={isModal && localCard !== null}
        onColorSelect={handleColorChange}
        onDelete={handleDeleteCard}
        onClose={handleClose}
        onSave={handleSave}
        onColorPickerToggle={setIsColorPickerOpen}
        onAddTodo={handleAddTodo}
      />
    </div>
  );

  if (isModal) {
    const handleBackdropClick = () => {
      if (currentCardRef.current) {
        upsertCard(currentCardRef.current);
      }
      handleClose();
    };

    return (
      <div
        data-testid="todoTrigger-modal"
        className="fixed inset-0 bg-gray-800/80 flex items-center justify-center p-4"
        onClick={handleBackdropClick}
      >
        <div
          className="rounded-3xl shadow-lg w-full max-w-md app-background"
          onClick={(e) => e.stopPropagation()}
        >
          {cardContent}
        </div>
      </div>
    );
  }

  return cardContent;
};