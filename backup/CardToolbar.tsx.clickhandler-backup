import { useState, useEffect, useRef } from 'react';
import { Icon } from './Icon';
import { ColorPicker } from './ColorPicker';
import type { CardToolbarProps } from '../types';

export const CardToolbar = ({
  isModal,
  isBeingEdited,
  initialData,
  backgroundColor,
  hasUnsavedChanges,
  onColorSelect,
  onDelete,
  onClose,
  onSave,
  onColorPickerToggle,
  onAddTodo,
}: CardToolbarProps) => {
  const [showColorPicker, setShowColorPicker] = useState(false);
  const colorPickerRef = useRef<HTMLDivElement>(null);

  const handleButtonClick = (action: () => void) => {
    if (isBeingEdited) return undefined;
    return (e: React.MouseEvent) => {
      e.stopPropagation();
      action();
    };
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        colorPickerRef.current &&
        !colorPickerRef.current.contains(event.target as Node)
      ) {
        setShowColorPicker(false);
        onColorPickerToggle?.(false);
      }
    };

    if (showColorPicker) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [showColorPicker]);

  return (
    <div
      className={`mt-1 grid grid-cols-9 ${
        isModal ? '' : 'opacity-0 group-hover:opacity-100 transition-opacity'
      }`}
      role="toolbar"
    >
      <button
        onClick={handleButtonClick(() => onAddTodo())}
        className="text-gray-700 hover:text-gray-700/80  justify-self-start cursor-pointer col-start-1"
        title="Add task"
        aria-label="add toDo"
        disabled={isBeingEdited}
      >
        <Icon
          name="add-todoitem"
          className="w-8 h-8 hover:opacity-80 "
          alt="Add task"
        />
      </button>

      <button
        onClick={handleButtonClick(() => {
          const newState = !showColorPicker;
          setShowColorPicker(newState);
          onColorPickerToggle?.(newState);
        })}
        className={`text-gray-700 hover:text-gray-700/80  justify-self-end cursor-pointer relative ${
          isModal ? 'col-start-6' : 'col-start-8'
        }`}
        title="Color palette"
        disabled={isBeingEdited}
      >
        <Icon
          name="palette"
          className="w-4 h-4 hover:opacity-80 "
          alt="Color palette"
        />
        {showColorPicker && (
          <ColorPicker
            ref={colorPickerRef}
            selectedColor={backgroundColor}
            onColorSelect={onColorSelect}
            onClose={() => {
              setShowColorPicker(false);
              onColorPickerToggle?.(false);
            }}
          />
        )}
      </button>

      <button
        onClick={handleButtonClick(() => {
          if (isModal) {
            if (initialData) {
              onDelete(initialData.id);
            }
            if (onClose) {
              onClose();
            }
          } else {
            onDelete(initialData?.id || '');
          }
        })}
        className={`text-gray-700 hover:text-red-600  justify-self-end cursor-pointer ${
          isModal ? 'col-start-7' : 'col-start-9'
        }`}
        title={
          isModal
            ? initialData
              ? 'Delete card'
              : 'Discard changes and close'
            : 'Delete card'
        }
        disabled={isBeingEdited}
      >
        <Icon
          name="trash"
          className="w-4 h-4 hover:opacity-80 "
          alt="Delete card"
        />
      </button>

      {isModal && (
        <button
          onClick={handleButtonClick(() => onSave())}
          className="text-gray-700 hover:text-gray-700/80 text-lg tracking-widest font-medium  justify-self-end cursor-pointer col-start-8 col-span-2"
          title="Save changes"
          disabled={isBeingEdited || !hasUnsavedChanges}
        >
          Save
        </button>
      )}
    </div>
  );
};
